{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Projects\\\\WebApp\\\\my-app\\\\src\\\\components\\\\testCarousel.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Slide from \"./testSlide\";\n// import PropTypes from \"prop-types\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n_c = Wrapper;\nconst NavigationButtons = styled.div`\n  position: relative;\n  display: flex;\n\n  height: 60px;\n  margin: 0 auto;\n  width: 20%;\n  margin-top: 1rem;\n  justify-content: space-between;\n  z-index: 1000;\n`;\n_c2 = NavigationButtons;\nconst NavBtn = styled.div`\n  background: white;\n  padding: 15px;\n  margin-bottom: 10px;\n  border-radius: 3px;\n  color: black;\n`;\n\n// function mod(a, b) {\n//   return ((a % b) + b) % b;\n// }\n_c3 = NavBtn;\nfunction TestVerticalCarousel(props) {\n  _s();\n  const [state, setState] = useState({\n    index: 0,\n    goToSlide: null,\n    prevPropsGoToSlide: 0,\n    newSlide: false,\n    direction: ''\n  });\n  // console.log(props);\n  // console.log(state);\n  //   state = {\n  //     index: 0,\n  //     goToSlide: null,\n  //     prevPropsGoToSlide: 0,\n  //     newSlide: false\n  //   };\n\n  //   const componentDidMount = () => {\n  //     document.addEventListener(\"keydown\", event => {\n  //       if (event.isComposing || event.keyCode === 229) {\n  //         return;\n  //       }\n  //       if (event.keyCode === 38) {\n  //         moveSlide(-1);\n  //       }\n  //       if (event.keyCode === 40) {\n  //         moveSlide(1);\n  //       }\n  //     });\n  //   };\n\n  //   static propTypes = {\n  //     slides: PropTypes.arrayOf(\n  //       PropTypes.shape({\n  //         key: PropTypes.any,\n  //         content: PropTypes.object\n  //       })\n  //     ).isRequired,\n  //     goToSlide: PropTypes.number,\n  //     showNavigation: PropTypes.bool,\n  //     offsetRadius: PropTypes.number,\n  //     animationConfig: PropTypes.object\n  //   };\n\n  //   static defaultProps = {\n  //     offsetRadius: 2,\n  //     animationConfig: { tension: 120, friction: 14 }\n  //   };\n  const mod = (a, b) => {\n    return (a % b + b) % b;\n  };\n  const modBySlidesLength = index => {\n    return mod(index, props.slides.length);\n  };\n  const moveSlide = direction => {\n    // getting the direction string based on the direction value\n    let dir = '';\n    if (direction === 1) {\n      dir = 'up';\n    } else {\n      dir = 'down';\n    }\n\n    // setting the new state\n    setState({\n      index: modBySlidesLength(state.index + direction),\n      goToSlide: null,\n      prevPropsGoToSlide: state.prevPropsGoToSlide,\n      newSlide: state.newSlide,\n      direction: dir\n    });\n  };\n  const clampOffsetRadius = offsetRadius => {\n    // const slides = props.slides;\n    const upperBound = Math.floor((props.slides.length - 1) / 2);\n    if (offsetRadius < 0) {\n      return 0;\n    }\n    if (offsetRadius > upperBound) {\n      return upperBound;\n    }\n    return offsetRadius;\n  };\n  const getPresentableSlides = () => {\n    // const { slides } = props.slides;\n    // const { index } = state.index;\n    // let { offsetRadius } = props.offsetRadius;\n    // let offset = props.offsetRadius;\n    let offsetRadius = clampOffsetRadius(props.offsetRadius);\n    const presentableSlides = new Array();\n    for (let i = -offsetRadius; i < 1 + offsetRadius; i++) {\n      presentableSlides.push(props.slides[modBySlidesLength(state.index + i)]);\n    }\n    return presentableSlides;\n  };\n\n  //   render() {\n  //     const { animationConfig, offsetRadius, showNavigation } = this.props;\n\n  //     let navigationButtons = null;\n  //     if (showNavigation) {\n  //       navigationButtons = (\n  //         <NavigationButtons>\n  //           <NavBtn onClick={() => this.moveSlide(1)}>&#8593;</NavBtn>\n  //           <NavBtn onClick={() => this.moveSlide(-1)}>&#8595;</NavBtn>\n  //         </NavigationButtons>\n  //       );\n  //     }\n  let navigationButtons = null;\n  if (props.showNavigation) {\n    navigationButtons = /*#__PURE__*/_jsxDEV(NavigationButtons, {\n      children: [/*#__PURE__*/_jsxDEV(NavBtn, {\n        onClick: () => moveSlide(1),\n        children: \"\\u2191\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavBtn, {\n        onClick: () => moveSlide(-1),\n        children: \"\\u2193\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Wrapper, {\n      children: getPresentableSlides().map((slide, presentableIndex) => /*#__PURE__*/_jsxDEV(Slide, {\n        content: slide.content.name,\n        moveSlide: moveSlide,\n        offsetRadius: clampOffsetRadius(props.offsetRadius),\n        index: presentableIndex,\n        animationConfig: props.animationConfig,\n        dir: state.direction\n      }, slide.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), navigationButtons]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 7\n  }, this);\n  //   }\n}\n_s(TestVerticalCarousel, \"hrLnc2KYe0zK+HELq7nTmHXw3CU=\");\n_c4 = TestVerticalCarousel;\nexport default TestVerticalCarousel;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"NavigationButtons\");\n$RefreshReg$(_c3, \"NavBtn\");\n$RefreshReg$(_c4, \"TestVerticalCarousel\");","map":{"version":3,"names":["React","styled","Slide","useState","jsxDEV","_jsxDEV","Wrapper","div","_c","NavigationButtons","_c2","NavBtn","_c3","TestVerticalCarousel","props","_s","state","setState","index","goToSlide","prevPropsGoToSlide","newSlide","direction","mod","a","b","modBySlidesLength","slides","length","moveSlide","dir","clampOffsetRadius","offsetRadius","upperBound","Math","floor","getPresentableSlides","presentableSlides","Array","i","push","navigationButtons","showNavigation","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","map","slide","presentableIndex","content","name","animationConfig","id","_c4","$RefreshReg$"],"sources":["D:/React Projects/WebApp/my-app/src/components/testCarousel.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Slide from \"./testSlide\";\r\n// import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst NavigationButtons = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n\r\n  height: 60px;\r\n  margin: 0 auto;\r\n  width: 20%;\r\n  margin-top: 1rem;\r\n  justify-content: space-between;\r\n  z-index: 1000;\r\n`;\r\n\r\nconst NavBtn = styled.div`\r\n  background: white;\r\n  padding: 15px;\r\n  margin-bottom: 10px;\r\n  border-radius: 3px;\r\n  color: black;\r\n`;\r\n\r\n// function mod(a, b) {\r\n//   return ((a % b) + b) % b;\r\n// }\r\n\r\nfunction TestVerticalCarousel(props) {\r\n  const [state, setState] = useState({\r\n    index: 0,\r\n    goToSlide: null,\r\n    prevPropsGoToSlide: 0,\r\n    newSlide: false,\r\n    direction: ''\r\n  });\r\n  // console.log(props);\r\n  // console.log(state);\r\n//   state = {\r\n//     index: 0,\r\n//     goToSlide: null,\r\n//     prevPropsGoToSlide: 0,\r\n//     newSlide: false\r\n//   };\r\n\r\n//   const componentDidMount = () => {\r\n//     document.addEventListener(\"keydown\", event => {\r\n//       if (event.isComposing || event.keyCode === 229) {\r\n//         return;\r\n//       }\r\n//       if (event.keyCode === 38) {\r\n//         moveSlide(-1);\r\n//       }\r\n//       if (event.keyCode === 40) {\r\n//         moveSlide(1);\r\n//       }\r\n//     });\r\n//   };\r\n\r\n//   static propTypes = {\r\n//     slides: PropTypes.arrayOf(\r\n//       PropTypes.shape({\r\n//         key: PropTypes.any,\r\n//         content: PropTypes.object\r\n//       })\r\n//     ).isRequired,\r\n//     goToSlide: PropTypes.number,\r\n//     showNavigation: PropTypes.bool,\r\n//     offsetRadius: PropTypes.number,\r\n//     animationConfig: PropTypes.object\r\n//   };\r\n\r\n//   static defaultProps = {\r\n//     offsetRadius: 2,\r\n//     animationConfig: { tension: 120, friction: 14 }\r\n//   };\r\n  const mod = (a, b) => {\r\n    return ((a % b) + b) % b;\r\n  };\r\n\r\n  const modBySlidesLength = (index) => {\r\n    return mod(index, props.slides.length);\r\n  };\r\n\r\n  const moveSlide = (direction) => {\r\n    // getting the direction string based on the direction value\r\n    let dir = '';\r\n    if (direction === 1) {\r\n      dir = 'up';\r\n    } else {\r\n      dir = 'down';\r\n    }\r\n    \r\n    // setting the new state\r\n    setState({\r\n      index: modBySlidesLength(state.index + direction),\r\n      goToSlide: null,\r\n      prevPropsGoToSlide: state.prevPropsGoToSlide,\r\n      newSlide: state.newSlide,\r\n      direction: dir\r\n    });\r\n  };\r\n\r\n  const clampOffsetRadius = (offsetRadius) => {\r\n    // const slides = props.slides;\r\n    const upperBound = Math.floor((props.slides.length - 1) / 2);\r\n\r\n    if (offsetRadius < 0) {\r\n      return 0;\r\n    }\r\n    if (offsetRadius > upperBound) {\r\n      return upperBound;\r\n    }\r\n\r\n    return offsetRadius;\r\n  };\r\n\r\n  const getPresentableSlides = () => {\r\n    // const { slides } = props.slides;\r\n    // const { index } = state.index;\r\n    // let { offsetRadius } = props.offsetRadius;\r\n    // let offset = props.offsetRadius;\r\n    let offsetRadius = clampOffsetRadius(props.offsetRadius);\r\n    const presentableSlides = new Array();\r\n\r\n    for (let i = -offsetRadius; i < 1 + offsetRadius; i++) {\r\n      presentableSlides.push(props.slides[modBySlidesLength(state.index + i)]);\r\n    }\r\n\r\n    return presentableSlides;\r\n  }\r\n\r\n//   render() {\r\n//     const { animationConfig, offsetRadius, showNavigation } = this.props;\r\n\r\n//     let navigationButtons = null;\r\n//     if (showNavigation) {\r\n//       navigationButtons = (\r\n//         <NavigationButtons>\r\n//           <NavBtn onClick={() => this.moveSlide(1)}>&#8593;</NavBtn>\r\n//           <NavBtn onClick={() => this.moveSlide(-1)}>&#8595;</NavBtn>\r\n//         </NavigationButtons>\r\n//       );\r\n//     }\r\n  let navigationButtons = null;\r\n  if (props.showNavigation) {\r\n    navigationButtons = (\r\n      <NavigationButtons>\r\n        <NavBtn onClick={() => moveSlide(1)}>&#8593;</NavBtn>\r\n        <NavBtn onClick={() => moveSlide(-1)}>&#8595;</NavBtn>\r\n      </NavigationButtons>\r\n    );\r\n  }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Wrapper>\r\n          {getPresentableSlides().map((slide, presentableIndex) => (\r\n            <Slide\r\n              key={slide.id}\r\n              content={slide.content.name}\r\n              moveSlide={moveSlide}\r\n              offsetRadius={clampOffsetRadius(props.offsetRadius)}\r\n              index={presentableIndex}\r\n              animationConfig={props.animationConfig}\r\n              dir={state.direction}\r\n            />\r\n          ))}\r\n        </Wrapper>\r\n        {navigationButtons}\r\n      </React.Fragment>\r\n    );\r\n//   }\r\n}\r\n\r\nexport default TestVerticalCarousel;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}